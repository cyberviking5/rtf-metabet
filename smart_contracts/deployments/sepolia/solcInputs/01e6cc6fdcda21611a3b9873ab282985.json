{
  "language": "Solidity",
  "sources": {
    "contracts/Gamble.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract Gamble {\r\n    address private immutable owner;\r\n    uint256 public immutable entryFee;\r\n    uint256 public winner=0;\r\n\r\n    struct User {\r\n        bool hasEntered;\r\n    }\r\n\r\n\r\n    mapping(address => User) public users;\r\n    mapping(address => uint256) public gamblersToAmountBet;\r\n    mapping(address=>uint256) public BetOn;\r\n    address[] public gamblers;\r\n\r\n    event UserEntered(address user, uint256 amount);\r\n    event UserWon(address user, uint256 amount);\r\n    event UserLost(address user, uint256 amount);\r\n\r\n    constructor(uint256 _entryFee) {\r\n        owner = msg.sender;\r\n        entryFee = _entryFee;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    function enter(uint256 Bet_On) public payable {\r\n        require(msg.value >= (entryFee/10**18), \"Insufficient entry fee\");\r\n        require(!users[msg.sender].hasEntered, \"You have already entered\");\r\n        gamblersToAmountBet[msg.sender] = msg.value;\r\n        BetOn[msg.sender]=Bet_On;\r\n        gamblers.push(msg.sender);\r\n        users[msg.sender].hasEntered = true;\r\n        emit UserEntered(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw() public onlyOwner payable  {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function getEntryFee() public view returns (uint256) {\r\n        return entryFee;\r\n    }\r\n\r\n    function getUserEntryStatus(address user) public view returns (bool) {\r\n        return users[user].hasEntered;\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function setWinner(uint256 win) public  onlyOwner{\r\n        winner=win;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}